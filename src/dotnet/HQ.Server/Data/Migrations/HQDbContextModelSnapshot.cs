// <auto-generated />
using System;
using HQ.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HQ.Server.Data.Migrations
{
    [DbContext(typeof(HQDbContext))]
    partial class HQDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HQ.Server.Data.Models.Blob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("ETag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etag");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_blobs");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_blobs_key");

                    b.ToTable("blobs", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChargeCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("charge_code_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("Hours")
                        .HasColumnType("numeric")
                        .HasColumnName("hours");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("ChargeCodeId")
                        .HasDatabaseName("ix_books_charge_code_id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ChargeCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("Activity")
                        .HasColumnType("integer")
                        .HasColumnName("activity");

                    b.Property<bool>("Billable")
                        .HasColumnType("boolean")
                        .HasColumnName("billable");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("quote_id");

                    b.Property<Guid?>("ServiceAgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_agreement_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_charge_codes");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_charge_codes_code");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_charge_codes_project_id");

                    b.HasIndex("QuoteId")
                        .IsUnique()
                        .HasDatabaseName("ix_charge_codes_quote_id");

                    b.HasIndex("ServiceAgreementId")
                        .IsUnique()
                        .HasDatabaseName("ix_charge_codes_service_agreement_id");

                    b.ToTable("charge_codes", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BillingEmail")
                        .HasColumnType("text")
                        .HasColumnName("billing_email");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("hourly_rate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OfficialName")
                        .HasColumnType("text")
                        .HasColumnName("official_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_name");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChargeCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("charge_code_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_expenses");

                    b.HasIndex("ChargeCodeId")
                        .HasDatabaseName("ix_expenses_charge_code_id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_expenses_invoice_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_expenses_staff_id");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Jurisdiciton")
                        .HasColumnType("integer")
                        .HasColumnName("jurisdiciton");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_holidays");

                    b.HasIndex("Jurisdiciton", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_holidays_jurisdiciton_date");

                    b.ToTable("holidays", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<decimal>("TotalApprovedHours")
                        .HasColumnType("numeric")
                        .HasColumnName("total_approved_hours");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_invoices_client_id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_invoices_invoice_number");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_plans");

                    b.HasIndex("StaffId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_plans_staff_id_date");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChargeCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("charge_code_id");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean")
                        .HasColumnName("completed");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_points");

                    b.HasIndex("ChargeCodeId")
                        .HasDatabaseName("ix_points_charge_code_id");

                    b.HasIndex("StaffId", "Sequence", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_points_staff_id_sequence_date");

                    b.ToTable("points", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BookingHours")
                        .HasColumnType("numeric")
                        .HasColumnName("booking_hours");

                    b.Property<int>("BookingPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("booking_period");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("hourly_rate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProjectManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_manager_id");

                    b.Property<int?>("ProjectNumber")
                        .HasColumnType("integer")
                        .HasColumnName("project_number");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("quote_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TimeEntryMaxHours")
                        .HasColumnType("numeric")
                        .HasColumnName("time_entry_max_hours");

                    b.Property<decimal?>("TotalHours")
                        .HasColumnType("numeric")
                        .HasColumnName("total_hours");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_projects_client_id");

                    b.HasIndex("ProjectManagerId")
                        .HasDatabaseName("ix_projects_project_manager_id");

                    b.HasIndex("ProjectNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_project_number");

                    b.HasIndex("QuoteId")
                        .HasDatabaseName("ix_projects_quote_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ProjectActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_project_activities");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_project_activities_project_id_name");

                    b.ToTable("project_activities", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_project_members");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_project_members_staff_id");

                    b.HasIndex("ProjectId", "StaffId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_members_project_id_staff_id");

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ProjectStatusReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("BilledTime")
                        .HasColumnType("numeric")
                        .HasColumnName("billed_time");

                    b.Property<decimal?>("BookedTime")
                        .HasColumnType("numeric")
                        .HasColumnName("booked_time");

                    b.Property<DateOnly>("BookingEndDate")
                        .HasColumnType("date")
                        .HasColumnName("booking_end_date");

                    b.Property<int>("BookingPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("booking_period");

                    b.Property<DateOnly>("BookingStartDate")
                        .HasColumnType("date")
                        .HasColumnName("booking_start_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal?>("PercentComplete")
                        .HasColumnType("numeric")
                        .HasColumnName("percent_complete");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid?>("ProjectManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_manager_id");

                    b.Property<string>("Report")
                        .HasColumnType("text")
                        .HasColumnName("report");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_project_status_reports");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_status_reports_project_id");

                    b.HasIndex("ProjectManagerId")
                        .HasDatabaseName("ix_project_status_reports_project_manager_id");

                    b.ToTable("project_status_reports", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HasPDF")
                        .HasColumnType("boolean")
                        .HasColumnName("has_pdf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("QuoteNumber")
                        .HasColumnType("integer")
                        .HasColumnName("quote_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_quotes");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_quotes_client_id");

                    b.HasIndex("QuoteNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_quotes_quote_number");

                    b.ToTable("quotes", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<Guid>("ServiceAgreementId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_agreement_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_services_invoice_id");

                    b.HasIndex("ServiceAgreementId")
                        .HasDatabaseName("ix_services_service_agreement_id");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ServiceAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<int>("CostPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("cost_period");

                    b.Property<decimal>("CostValue")
                        .HasColumnType("numeric")
                        .HasColumnName("cost_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PricePeriod")
                        .HasColumnType("integer")
                        .HasColumnName("price_period");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("numeric")
                        .HasColumnName("price_value");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("quote_id");

                    b.Property<int>("ServiceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("service_number");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_agreements");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_service_agreements_client_id");

                    b.HasIndex("QuoteId")
                        .HasDatabaseName("ix_service_agreements_quote_id");

                    b.HasIndex("ServiceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_service_agreements_service_number");

                    b.ToTable("service_agreements", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Jurisdiciton")
                        .HasColumnType("integer")
                        .HasColumnName("jurisdiciton");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateOnly?>("TimeEntryCutoffDate")
                        .HasColumnType("date")
                        .HasColumnName("time_entry_cutoff_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VacationHours")
                        .HasColumnType("integer")
                        .HasColumnName("vacation_hours");

                    b.Property<int>("WorkHours")
                        .HasColumnType("integer")
                        .HasColumnName("work_hours");

                    b.HasKey("Id")
                        .HasName("pk_staff");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_staff_name");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Time", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<Guid?>("AcceptedById")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_id");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<DateTime?>("CapturedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("captured_at");

                    b.Property<Guid>("ChargeCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("charge_code_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid?>("HolidayId")
                        .HasColumnType("uuid")
                        .HasColumnName("holiday_id");

                    b.Property<decimal>("Hours")
                        .HasColumnType("numeric")
                        .HasColumnName("hours");

                    b.Property<decimal?>("HoursApproved")
                        .HasColumnType("numeric")
                        .HasColumnName("hours_approved");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejected_at");

                    b.Property<Guid?>("RejectedById")
                        .HasColumnType("uuid")
                        .HasColumnName("rejected_by_id");

                    b.Property<string>("RejectionNotes")
                        .HasColumnType("text")
                        .HasColumnName("rejection_notes");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Task")
                        .HasColumnType("text")
                        .HasColumnName("task");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_times");

                    b.HasIndex("AcceptedById")
                        .HasDatabaseName("ix_times_accepted_by_id");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_times_activity_id");

                    b.HasIndex("ChargeCodeId")
                        .HasDatabaseName("ix_times_charge_code_id");

                    b.HasIndex("HolidayId")
                        .HasDatabaseName("ix_times_holiday_id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_times_invoice_id");

                    b.HasIndex("RejectedById")
                        .HasDatabaseName("ix_times_rejected_by_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_times_staff_id");

                    b.ToTable("times", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys", (string)null);
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Book", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.ChargeCode", "ChargeCode")
                        .WithMany()
                        .HasForeignKey("ChargeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_charge_codes_charge_code_id");

                    b.Navigation("ChargeCode");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ChargeCode", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Project", "Project")
                        .WithOne("ChargeCode")
                        .HasForeignKey("HQ.Server.Data.Models.ChargeCode", "ProjectId")
                        .HasConstraintName("fk_charge_codes_projects_project_id");

                    b.HasOne("HQ.Server.Data.Models.Quote", "Quote")
                        .WithOne("ChargeCode")
                        .HasForeignKey("HQ.Server.Data.Models.ChargeCode", "QuoteId")
                        .HasConstraintName("fk_charge_codes_quotes_quote_id");

                    b.HasOne("HQ.Server.Data.Models.ServiceAgreement", "ServiceAgreement")
                        .WithOne("ChargeCode")
                        .HasForeignKey("HQ.Server.Data.Models.ChargeCode", "ServiceAgreementId")
                        .HasConstraintName("fk_charge_codes_service_agreements_service_agreement_id");

                    b.Navigation("Project");

                    b.Navigation("Quote");

                    b.Navigation("ServiceAgreement");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Expense", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.ChargeCode", "ChargeCode")
                        .WithMany()
                        .HasForeignKey("ChargeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_charge_codes_charge_code_id");

                    b.HasOne("HQ.Server.Data.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_expenses_invoices_invoice_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .HasConstraintName("fk_expenses_staff_staff_id");

                    b.Navigation("ChargeCode");

                    b.Navigation("Invoice");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Invoice", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoices_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Plan", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Staff", "Staff")
                        .WithMany("Plans")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plans_staff_staff_id");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Point", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.ChargeCode", "ChargeCode")
                        .WithMany()
                        .HasForeignKey("ChargeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_points_charge_codes_charge_code_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_points_staff_staff_id");

                    b.Navigation("ChargeCode");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Project", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_clients_client_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .HasConstraintName("fk_projects_staff_project_manager_id");

                    b.HasOne("HQ.Server.Data.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .HasConstraintName("fk_projects_quotes_quote_id");

                    b.Navigation("Client");

                    b.Navigation("ProjectManager");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ProjectActivity", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_activities_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ProjectMember", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_projects_project_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "Staff")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_staff_staff_id");

                    b.Navigation("Project");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ProjectStatusReport", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_status_reports_projects_project_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .HasConstraintName("fk_project_status_reports_staff_project_manager_id");

                    b.Navigation("Project");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Quote", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Client", "Client")
                        .WithMany("Quotes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quotes_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Service", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_services_invoices_invoice_id");

                    b.HasOne("HQ.Server.Data.Models.ServiceAgreement", "ServiceAgreement")
                        .WithMany()
                        .HasForeignKey("ServiceAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_service_agreements_service_agreement_id");

                    b.Navigation("Invoice");

                    b.Navigation("ServiceAgreement");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ServiceAgreement", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Client", "Client")
                        .WithMany("ServiceAgreements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_agreements_clients_client_id");

                    b.HasOne("HQ.Server.Data.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .HasConstraintName("fk_service_agreements_quotes_quote_id");

                    b.Navigation("Client");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Time", b =>
                {
                    b.HasOne("HQ.Server.Data.Models.Staff", "AcceptedBy")
                        .WithMany()
                        .HasForeignKey("AcceptedById")
                        .HasConstraintName("fk_times_staff_accepted_by_id");

                    b.HasOne("HQ.Server.Data.Models.ProjectActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("fk_times_project_activities_activity_id");

                    b.HasOne("HQ.Server.Data.Models.ChargeCode", "ChargeCode")
                        .WithMany("Times")
                        .HasForeignKey("ChargeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_times_charge_codes_charge_code_id");

                    b.HasOne("HQ.Server.Data.Models.Holiday", "Holiday")
                        .WithMany()
                        .HasForeignKey("HolidayId")
                        .HasConstraintName("fk_times_holidays_holiday_id");

                    b.HasOne("HQ.Server.Data.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_times_invoices_invoice_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "RejectedBy")
                        .WithMany()
                        .HasForeignKey("RejectedById")
                        .HasConstraintName("fk_times_staff_rejected_by_id");

                    b.HasOne("HQ.Server.Data.Models.Staff", "Staff")
                        .WithMany("Times")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_times_staff_staff_id");

                    b.Navigation("AcceptedBy");

                    b.Navigation("Activity");

                    b.Navigation("ChargeCode");

                    b.Navigation("Holiday");

                    b.Navigation("Invoice");

                    b.Navigation("RejectedBy");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ChargeCode", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Client", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Projects");

                    b.Navigation("Quotes");

                    b.Navigation("ServiceAgreements");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ChargeCode");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Quote", b =>
                {
                    b.Navigation("ChargeCode");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.ServiceAgreement", b =>
                {
                    b.Navigation("ChargeCode");
                });

            modelBuilder.Entity("HQ.Server.Data.Models.Staff", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Times");
                });
#pragma warning restore 612, 618
        }
    }
}
